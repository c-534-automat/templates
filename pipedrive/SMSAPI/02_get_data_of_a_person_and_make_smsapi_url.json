{
    "name":"02. GET data of a person and make SMSAPI URL",
    "connector_in":"REST, v4.3 beta",
    "parameters_in":{
        "error_codes":[
            404,
            500
        ],
        "headers":{},
        "http_method":"GET",
        "rest_data":{},
        "url":"https://api.pipedrive.com/v1",
        "url_params":{
            "token":"YOUR_TOKEN"
        },
        "user":{}
    },
    "connector_out":"SPLIT, v1.1",
    "parameters_out":{
        "delay_ms":"0",
        "name":"process",
        "params":{
            "param_dict":{},
            "url":"some_url"
        }
    },
    "transformation":"print in_dict\r\nprint '''\r\n################################################################################\r\n########## Integracja pipeline z smsapi Microservice #2 ########################\r\n################################################################################\r\n'''\r\nprocess_name = '03. Send SMS through a URL.'\r\nfirst_name = in_dict['data'][u'first_name']\r\nphone_number = in_dict['data'][u'phone'][0][u'value']\r\noffer_change = param_dict['data']\r\nSMSAPI_USERNAME = '' # \r\nSMSAPI_PASSWORD = '' # NOT A SIMPLE USERNAME PASSWORD\r\nSMSAPI_MESSAGE_TYPE = 'ECO'  # Message types are: ECO,\r\nSMSAPI_TEL_NUM = '48' + str(phone_number)  # 48 - prefix do PL\r\nSMSAPI_MESSAGE = 'Witaj ' + str(first_name)  + ' Twoje zamowienie zmienilo status ' + str(offer_change)  # What you want to pass inside SMS\r\nurl = 'http://api.smsapi.pl/sms.do?username={}&password={}&rfrom={}&to={}&message={}'.format(SMSAPI_USERNAME,\r\n                                                                                                    SMSAPI_PASSWORD,\r\n                                                                                                    SMSAPI_MESSAGE_TYPE,\r\n                                                                                                    SMSAPI_TEL_NUM,\r\n                                                                                                    SMSAPI_MESSAGE)\r\n\r\ndef get_split_settings(process_name, url=None, phrase=None, params=None, rest_data=None):\r\n    split = {'name': process_name,\r\n             'delay_ms': 0,\r\n             'params': {'param_dict': {'data' : param_dict}}}\r\n    if url:\r\n        split['params'].update({'url': url})\r\n    if phrase:\r\n        split['params']['param_dict'].update({'phrase': phrase})\r\n    if params:\r\n        split['params']['param_dict'].update(params)\r\n    if rest_data:\r\n        split['params'].update({'rest_data': [rest_data]})\r\n    return split\r\n\r\n\r\ndef main():\r\n    splits = []\r\n    split = get_split_settings(process_name, url=url, phrase=None, params=None, rest_data=None)\r\n    splits.append(split)\r\n    return splits\r\n\r\n\r\nout_dict = main()\r\nprint out_dict\r\n\r\n"
}