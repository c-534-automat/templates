{
    "name": "01. Obtain the PUSH data.",
    "connector_in": "REST, v4.3 beta",
    "parameters_in": {
        "error_codes": [
            404,
            500
        ],
        "headers": {},
        "http_method": "GET",
        "rest_data": {},
        "url": "",
        "url_params": {},
        "user": {}
    },
    "connector_out": "SPLIT, v1.1",
    "parameters_out": {
        "delay_ms": "0",
        "name": "process",
        "params": {
            "param_dict": {},
            "url": "some_url"
        }
    },
    "transformation":"
    print in_dict
    print '''
    ##########################################################################################
    Integracja pipeline z smsapi Microservice #1 ######################################################################################################## 
    '''
    process_name = '02. GET data of a person and make SMSAPI URL'
    data = in_dict['data']
    current_state_of_order = data[u 'current']
    previous_state_of_order = data[u 'previous']
    title = current_state_of_order[u 'title']
    old_pipeline_num = previous_state_of_order[u 'stage_order_nr']
    new_pipeline_num = current_state_of_order[u 'stage_order_nr']
    lane_names = {
        1: 'Pomysl',
        2: 'Nawiazano kontakt',
        3: 'Odkryto potrzeby',
        4: 'Przedstawiono oferte',
        5: 'Negocjacje'
    }
    param_dict = 'ze stanu ' + str(lane_names[old_pipeline_num]) + ' na stan ' + str(lane_names[new_pipeline_num])
    person_id = current_state_of_order[u 'person_id']# WAÅ»NE
    url = 'https://api.pipedrive.com/v1/persons/{}?api_token=c57ac3365f43fdfa05b9cb2623b6cba1151c28fe'.format(person_id)

    def get_split_settings(process_name, url = None, phrase = None, params = None, rest_data = None): split = {
        'name': process_name,
        'delay_ms': 0,
        'params': {
            'param_dict': {
                'data': param_dict
            }
        }
    }
    if url: split['params'].update({
        'url': url
    })
    if phrase: split['params']['param_dict'].update({
        'phrase': phrase
    })
    if params: split['params']['param_dict'].update(params)
    if rest_data: split['params'].update({
        'rest_data': [rest_data]
    })
    return split
    def main(): splits = []
    split = get_split_settings(process_name, url = url, phrase = None, params = None, rest_data = None)
    splits.append(split)
    return splits
    out_dict = main()
    print out_dict"
}
